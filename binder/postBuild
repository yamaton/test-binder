#!/bin/bash

# https://repo2docker.readthedocs.io/en/latest/config_files.html#postbuild-run-code-after-installing-the-environment
# > Note that by default the build will not be stopped
# > if an error occurs inside a shell script. You should
# > include set -e or the equivalent at the start of the
# > script to avoid errors being silently ignored.
set -o errexit
set -o nounset


# ffsend
curl https://raw.githubusercontent.com/yamaton/dotfiles/dev/_setup-ffsend.sh | bash -s -- -f


# myextension
ffsend download 'https://send.vis.ee/download/561afffb1f620480/#1VxQFE709eIL9Dz8_wLOtg'
python -m pip install -U --prefix /srv/conda/envs/notebook myextension-0.1.0-py3-none-any.whl
rm -f myextension-0.1.0-py3-none-any.whl


# enable forked bash_kernel
python -m pip install -U --prefix /srv/conda/envs/notebook git+https://github.com/yamaton/bash_kernel@add-bash-completion


# install triton-lsp
# This path must be consistent with what's written in
# .jupyter/jupyter_server_config.json
mkdir -p /srv/conda/envs/notebook/etc/jupyter
npm install --prefix /srv/conda/envs/notebook/etc/jupyter yamaton/triton-lsp#dev


# install custom jupyterlab-lsp
pushd /srv/conda/envs/notebook
    wget https://github.com/yamaton/jupyterlab-lsp/archive/refs/heads/dev.zip
    unzip dev.zip
    rm -f dev.zip
    pushd jupyterlab-lsp-dev
        # Build labextensions
        jlpm bootstrap

        # Do a dev install of the server side
        pushd python_packages/jupyter_lsp
            python setup.py sdist bdist_wheel
            python -m pip install -e . --ignore-installed --no-deps -vv
            jupyter serverextension enable --sys-prefix --py jupyter_lsp
        popd

        # Install the labextension
        pushd python_packages/jupyterlab_lsp
            python setup.py sdist bdist_wheel
            python -m pip install -e . --ignore-installed --no-deps -vv
            jupyter labextension develop . --overwrite
        popd
    popd
popd


# Jupyterlab tailwind themes
jupyter labextension install 'https://github.com/yamaton/jupyterlab-tailwind-theme/tree/fix-statusbar'


# pipx: install programs in each virtual environment
export PIPX_HOME=/srv/conda/pipx
mkdir -p "$PIPX_HOME"
TOOLS=( "$(cat ~/binder/_tools_pipx.txt)" )
for _tool in ${TOOLS[*]}; do
    echo "Installing ${_tool}"
    # retry if nonzero exit status occurs
    if [[ ! ($(pipx install "$_tool")) ]]; then
        echo "pipx retrying... $_tool"
        pipx uninstall "$_tool"
        pipx install "$_tool"
    fi
done


# Tweak exit code of the condax runner scripts
export CONDAX_HIDE_EXITCODE=1
# condax: install programs in each conda environment
mkdir -p /srv/conda/condax/envs
mkdir -p ~/.config/condax
echo "use_lockfiles: false" > ~/.mambarc
echo "prefix_dir: /srv/conda/condax/envs" > ~/.config/condax/config.yaml

mkdir -p ~/.local/logs
CONDAX_LOG="$HOME/.local/logs/condax_install_log.txt"
TOOLS=( "$(cat ~/binder/_tools_condax.txt)" )
for _tool in ${TOOLS[*]}; do
    echo "Installing ${_tool}" | tee -a "$CONDAX_LOG"
    # retry if nonzero exit status occurs
    if [[ ! ($(condax install -c conda-forge -c bioconda --force "$_tool" 2>&1 | tee -a "$CONDAX_LOG")) ]]; then
        echo "condax retrying... $_tool" | tee -a "$CONDAX_LOG"
        condax remove "$_tool" | tee -a "$CONDAX_LOG"
        condax install -c conda-forge -c bioconda --force "$_tool" 2>&1 | tee -a "$CONDAX_LOG"
    fi
    mamba clean --all --yes --force-pkgs-dirs
done

## qiime2 (q2cli)
wget https://data.qiime2.org/distro/core/qiime2-2023.2-py38-linux-conda.yml -O qiime2.yml
condax install -c conda-forge -c bioconda --force --file qiime2.yml q2cli 2>&1 | tee -a "$CONDAX_LOG"
rm -f qiime2.yml
mamba clean --all --yes --force-pkgs-dirs

# brename
wget https://github.com/shenwei356/brename/releases/download/v2.13.0/brename_linux_amd64.tar.gz
tar -xvf brename_linux_amd64.tar.gz
mkdir -p  ~/.local/bin
mv -f ./brename ~/.local/bin
rm -f brename_linux_amd64.tar.gz

## awscli
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
rm -f awscliv2.zip
./aws/install --bin-dir /srv/conda/envs/notebook/bin --install-dir /srv/conda/envs/notebook/aws-cli
rm -rf ./aws


## zsh setup
## (subshelling does not seem to work in postBuild)
zshdir=~/.config/zsh
mkdir -p "$zshdir"
pushd "$zshdir"
    git clone https://github.com/zsh-users/zsh-syntax-highlighting
    git clone https://github.com/zsh-users/zsh-autosuggestions
    git clone https://github.com/zsh-git-prompt/zsh-git-prompt
    git clone https://github.com/yamaton/zsh-completions-bio
popd


## biosyntax
highlightdir=~/.local/share/source-highlight
mkdir -p "$highlightdir"
pushd "$highlightdir"
    git clone https://github.com/bioSyntax/bioSyntax
    mv bioSyntax/less/* .
    mv src-hilite-lesspipe-bio-LINUX.sh src-hilite-lesspipe-bio.sh
    rm -rf bioSyntax
popd

## remove .git in home directory
rm -rf .git
rm -f LICENSE README.md


## tealdeer
curl https://raw.githubusercontent.com/yamaton/dotfiles/dev/_setup-tealdeer.sh | bash -s -- -f


## croc
curl https://raw.githubusercontent.com/yamaton/dotfiles/dev/_setup-croc.sh | bash -s -- -f


## Install jupyterlab-shell-script-file
jupyter labextension install 'https://github.com/yamaton/jupyterlab-shell-script-file'


# Modify detail width of completion items
basedir="/srv/conda/envs/notebook/share/jupyter"
targets=(
    "${basedir}/lab/themes/@jupyterlab/theme-dark-extension/index.css"
    "${basedir}/lab/themes/@jupyterlab/theme-light-extension/index.css"
    "${basedir}/lab/themes/jupyterlab-tailwind-theme/index.css"
    "${basedir}/labextensions/@telamonian/theme-darcula/themes/@telamonian/theme-darcula/index.css"
)
for target in "${targets[@]}"; do
    if [[ -f $target ]]; then
        cat "binder/modify-theme.css" >> "$target"
    fi
done


## Disable Jupyter news announcement
jupyter labextension disable "@jupyterlab/apputils-extension:announcements"


# List extensions
jupyter serverextension list
jupyter server extension list
jupyter labextension list
jupyter lab extension list


## Change default settings for JupyterLab Extensions
mkdir -p "$NB_PYTHON_PREFIX"/share/jupyter/lab/settings/
cp binder/overrides.json "$NB_PYTHON_PREFIX"/share/jupyter/lab/settings/


# Save user-installed R packages in user directory
## https://stackoverflow.com/a/45228058
mkdir -p ~/.local/lib/R/library
cat <<EOF >> ~/.Renviron
R_LIBS_USER=$HOME/.local/lib/R/library/
EOF


## RStudio configuration
##  - Set working directory
##  - Unset LD_LIBRARY_PATH introduced by /etc/rstudio/rserver.conf
##    to avoid "mv: relocation error" during package installation
cat <<EOF >> ~/.Rprofile
setwd("~/work")
Sys.setenv(LD_LIBRARY_PATH = "")
EOF


## [NOTE] Place this AFTER conda packages setups.
##
## Change conda envs directories and pkgs directories s.t.
## users can keep user-installed conda packages persistently.
mkdir -p ~/.local/share/conda/envs
mkdir -p ~/.local/share/conda/pkgs
cat << 'EOF' >> ~/.condarc
channels:
  - conda-forge
  - bioconda

envs_dirs:
  - ~/.local/share/conda/envs
  - /srv/conda/envs

pkgs_dirs:
  - ~/.local/share/conda/pkgs
  - /srv/conda/pkgs

EOF


## Remove cache
##
## otherwise the size $HOME gets too large that
## docker volume initialization triggers a timeout
## at the very first startup of an environment
rm -rf ~/.cache
rm -rf ~/.npm
rm -rf ~/.yarn
