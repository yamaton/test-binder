# Auto-generated with h2o

_qiime()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          tools) _qiime_tools
            return
            ;;

          dev) _qiime_dev
            return
            ;;

      *)
          word_list=" tools dev --version --help" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_qiime_tools ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          tools)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cast-metadata) _qiime_cast-metadata
            return
            ;;

          citations) _qiime_citations
            return
            ;;

          export) _qiime_export
            return
            ;;

          extract) _qiime_extract
            return
            ;;

          import) _qiime_import
            return
            ;;

          inspect-metadata) _qiime_inspect-metadata
            return
            ;;

          validate) _qiime_validate
            return
            ;;

          view) _qiime_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cast-metadata citations export extract import inspect-metadata validate view --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_tools_cast-metadata ()
{
    local cur word_list
    word_list=" --cast --ignore-extra --error-on-missing --output-file --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_tools_citations ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_tools_export ()
{
    local cur word_list
    word_list=" --input-path --output-path --output-format --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_tools_extract ()
{
    local cur word_list
    word_list=" --input-path --output-path --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_tools_import ()
{
    local cur word_list
    word_list=" --type --input-path --output-path --input-format --show-importable-formats --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_tools_inspect-metadata ()
{
    local cur word_list
    word_list=" --tsv --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_tools_validate ()
{
    local cur word_list
    word_list=" --level --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_tools_view ()
{
    local cur word_list
    word_list=" --index-extension --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_qiime_dev ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          dev)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          assert-result-data) _qiime_assert-result-data
            return
            ;;

          assert-result-type) _qiime_assert-result-type
            return
            ;;

          export-default-theme) _qiime_export-default-theme
            return
            ;;

          import-theme) _qiime_import-theme
            return
            ;;

          refresh-cache) _qiime_refresh-cache
            return
            ;;

          reset-theme) _qiime_reset-theme
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" assert-result-data assert-result-type export-default-theme import-theme refresh-cache reset-theme --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dev_assert-result-data ()
{
    local cur word_list
    word_list=" --zip-data-path --expression --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dev_assert-result-type ()
{
    local cur word_list
    word_list=" --qiime-type --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dev_export-default-theme ()
{
    local cur word_list
    word_list=" --output-path --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dev_import-theme ()
{
    local cur word_list
    word_list=" --theme --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dev_refresh-cache ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dev_reset-theme ()
{
    local cur word_list
    word_list=" --yes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _qiime qiime
