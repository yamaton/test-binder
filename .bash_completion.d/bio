# Auto-generated with h2o

_bio()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          search) _bio_search
            return
            ;;

          fetch) _bio_fetch
            return
            ;;

          fasta) _bio_fasta
            return
            ;;

          gff) _bio_gff
            return
            ;;

          table) _bio_table
            return
            ;;

          align) _bio_align
            return
            ;;

          format) _bio_format
            return
            ;;

          taxon) _bio_taxon
            return
            ;;

          explain) _bio_explain
            return
            ;;

          meta) _bio_meta
            return
            ;;

          mygene) _bio_mygene
            return
            ;;

          gtf) _bio_gtf
            return
            ;;

          comm) _bio_comm
            return
            ;;

          uniq) _bio_uniq
            return
            ;;

      *)
          word_list=" search fetch fasta gff table align format taxon explain meta mygene gtf comm uniq "
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_bio_search ()
{
    local cur word_list
    word_list=" -h --help -a --all -c --csv -t --tab -H --header -s --species -S --scopes -u --update -l --limit -f --fields" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_fetch ()
{
    local cur word_list
    word_list=" -h --help -d --db -t --type -f --format -l --limit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_fasta ()
{
    local cur word_list
    word_list=" -h --help -s --start -e --end -t --type -i --id -m --match -g --gene -r --rename -p --protein -T --translate -R --revcomp -G --features -A --trim -o --olap -F --frame" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_gff ()
{
    local cur word_list
    word_list=" -h --help -s --start -e --end -t --type -i --id -m --match -g --gene -o --olap -r --rename" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_table ()
{
    local cur word_list
    word_list=" -h --help -s --start -e --end -t --type -i --id -m --match -g --gene -r --rename -o --olap -f --fields" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_align ()
{
    local cur word_list
    word_list=" -h --help -o --open -x --extend -M --matrix -L --local -G --global -m --match -i --mismatch -S --semiglobal -V --vcf -T --table -d --diff -p --pile -F --fasta -A --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_format ()
{
    local cur word_list
    word_list=" -h --help -s --start -e --end -d --diff -v --vcf -T --table -p --paired" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_taxon ()
{
    local cur word_list
    word_list=" -h --help -L --lineage -b --build -a --accessions -K --keep -R --remove -f --field -l --list -d --depth -p --preload -i --indent -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_explain ()
{
    local cur word_list
    word_list=" -h --help -b --build -P --preload -s --so -g --go -l --lineage -p --plot -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_meta ()
{
    local cur word_list
    word_list=" -h --help -H --header -L --limit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_mygene ()
{
    local cur word_list
    word_list=" -h --help -l --limit -s --species -f --fields -S --scopes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_gtf ()
{
    local cur word_list
    word_list=" -h --help -T --type -s --source -t --target -l --limit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_comm ()
{
    local cur word_list
    word_list=" -h --help -1 --uniq1 -2 --uniq2 -3 --union -t --tab -x --col1 -y --col2" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bio_uniq ()
{
    local cur word_list
    word_list=" -h --help -f --field -c --count -t --tab" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _bio bio
