# Auto-generated with h2o

_diamond()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          makedb) _diamond_makedb
            return
            ;;

          prepdb) _diamond_prepdb
            return
            ;;

          blastp) _diamond_blastp
            return
            ;;

          blastx) _diamond_blastx
            return
            ;;

          view) _diamond_view
            return
            ;;

          help) _diamond_help
            return
            ;;

          version) _diamond_version
            return
            ;;

          getseq) _diamond_getseq
            return
            ;;

          dbinfo) _diamond_dbinfo
            return
            ;;

          test) _diamond_test
            return
            ;;

          makeidx) _diamond_makeidx
            return
            ;;

      *)
          word_list=" makedb prepdb blastp blastx view help version getseq dbinfo test makeidx "
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_diamond_makedb ()
{
    local cur word_list
    word_list=" --in --taxonmap --taxonnodes --taxonnames" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_diamond_blastp ()
{
    local cur word_list
    word_list=" --query -q --strand --un --al --unfmt --alfmt --unal --max-target-seqs -k --top --max-hsps --range-culling --compress --evalue -e --min-score --id --query-cover --subject-cover --fast --mid-sensitive --sensitive --more-sensitive --very-sensitive --ultra-sensitive --iterate --global-ranking -g --block-size -b --index-chunks -c --tmpdir -t --parallel-tmpdir --gapopen --gapextend --frameshift -F --long-reads --matrix --custom-matrix --comp-based-stats --masking --query-gencode --salltitles --sallseqid --no-self-hits --taxonlist --taxon-exclude --seqidlist --skip-missing-seqids" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_diamond_blastx ()
{
    local cur word_list
    word_list=" --query -q --strand --un --al --unfmt --alfmt --unal --max-target-seqs -k --top --max-hsps --range-culling --compress --evalue -e --min-score --id --query-cover --subject-cover --fast --mid-sensitive --sensitive --more-sensitive --very-sensitive --ultra-sensitive --iterate --global-ranking -g --block-size -b --index-chunks -c --tmpdir -t --parallel-tmpdir --gapopen --gapextend --frameshift -F --long-reads --matrix --custom-matrix --comp-based-stats --masking --query-gencode --salltitles --sallseqid --no-self-hits --taxonlist --taxon-exclude --seqidlist --skip-missing-seqids" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_diamond_view ()
{
    local cur word_list
    word_list=" --daa -a --forwardonly" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_diamond_getseq ()
{
    local cur word_list
    word_list=" --seq" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _diamond diamond
