# Auto-generated with h2o

_smof()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          cut) _smof_cut
            return
            ;;

          clean) _smof_clean
            return
            ;;

          consensus) _smof_consensus
            return
            ;;

          filter) _smof_filter
            return
            ;;

          grep) _smof_grep
            return
            ;;

          md5sum) _smof_md5sum
            return
            ;;

          head) _smof_head
            return
            ;;

          permute) _smof_permute
            return
            ;;

          reverse) _smof_reverse
            return
            ;;

          sample) _smof_sample
            return
            ;;

          sniff) _smof_sniff
            return
            ;;

          sort) _smof_sort
            return
            ;;

          split) _smof_split
            return
            ;;

          stat) _smof_stat
            return
            ;;

          subseq) _smof_subseq
            return
            ;;

          tail) _smof_tail
            return
            ;;

          translate) _smof_translate
            return
            ;;

          uniq) _smof_uniq
            return
            ;;

          wc) _smof_wc
            return
            ;;

      *)
          word_list=" cut clean consensus filter grep md5sum head permute reverse sample sniff sort split stat subseq tail translate uniq wc -h --help -v --version"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_smof_cut ()
{
    local cur word_list
    word_list=" -h --help -f --fields -v --complement" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_clean ()
{
    local cur word_list
    word_list=" -h --help -t --type -u --toupper -l --tolower -x --toseq -s --reduce-header --delimiter -r --mask-irregular -m --mask-lowercase -w --col_width -d --standardize" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_consensus ()
{
    local cur word_list
    word_list=" -h --help -t --table" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_filter ()
{
    local cur word_list
    word_list=" -h --help -s --shorter-than -l --longer-than -c --composition" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_grep ()
{
    local cur word_list
    word_list=" -h --help -q --match-sequence -f --file -L --files-without-match -l --files-with-matches -w --wrap -P --perl-regexp -G --ambiguous-nucl -I --case-sensitive -v --invert-match -o --only-matching -B --before-context -A --after-context -C --context -c --count -m --count-matches -x --line-regexp -X --exact -g --gapped -b --both-strands -r --reverse-only -y --no-color -Y --force-color -S --preserve-color --color --gff --gff-type --fastain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_md5sum ()
{
    local cur word_list
    word_list=" -h --help -i --ignore-case -q --each-sequence -s --all-sequences -d --all-headers -r --replace-header" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_head ()
{
    local cur word_list
    word_list=" -h --help -n --entries -f --first -l --last" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_permute ()
{
    local cur word_list
    word_list=" -h --help -w --word-size -s --start-offset -e --end-offset --seed" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_reverse ()
{
    local cur word_list
    word_list=" -h --help -c --complement -V --no-validate -S --preserve-color -Y --force-color" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_sample ()
{
    local cur word_list
    word_list=" -h --help -n --number --seed" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_sniff ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_sort ()
{
    local cur word_list
    word_list=" -h --help -x --regex -r --reverse -n --numeric-sort -l --length-sort -R --random-sort -k --key -t -- -p --pair-separator" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_split ()
{
    local cur word_list
    word_list=" -h --help -n --number -q --seqs -p --prefix" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_stat ()
{
    local cur word_list
    word_list=" -h --help -d --delimiter -q --byseq -I --case-sensitive -m --count-lower -c --counts -t --type -l --length -p --proportion -C --aa-profile -g --hist -G --log-hist" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_subseq ()
{
    local cur word_list
    word_list=" -h --help -b --bounds -f --gff -k --keep -c --color -a --annotate -Y --force-color" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_tail ()
{
    local cur word_list
    word_list=" -h --help -n --entries -f --first -l --last" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_translate ()
{
    local cur word_list
    word_list=" -h --help -s --from-start -f --all-frames -c --cds" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_uniq ()
{
    local cur word_list
    word_list=" -h --help -c --count -d --repeated -u --uniq -p --pack -P --unpack -z --pack-sep -f --first-header --removed" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_smof_wc ()
{
    local cur word_list
    word_list=" -h --help -m --chars -l --lines" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _smof smof
